
awk
  sudo tail /var/log/nginx/access.log -n 200 | awk '/postVote/ {print $1}' | sort | uniq
  sudo tail /var/log/nginx/access.log -n 1000 | awk '/s~stellar-envoy-781/ {print $1}' | sort | uniq
  sudo tail -n 9000 /var/log/nginx/access.log | awk '/postVote/ {print $0}' | awk '!/stellar-envoy/ {print $0}';

aws
  autoscaling
    aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg --min-size 1 --max-size 1 --desired-capacity 1
    aws autoscaling suspend-processes --auto-scaling-group-name asg
    aws autoscaling resume-processes --auto-scaling-group-name asg
  ec2
    aws ec2 describe-images
    aws ec2 describe-instances
    aws ec2 describe-key-pairs
    aws ec2 describe-regions
    aws ec2 describe-security-groups
    aws ec2 describe-subnets
    aws ec2 describe-volumes
    aws ec2 describe-vpcs
    aws ec2 reboot-instances
    aws ec2 run-instances
    aws ec2 start-instances
    aws ec2 stop-instances
    aws ec2 terminate-instances

    // creating ec2 instance
    A)
    groupId=`aws ec2 describe-security-groups | jq -r '.SecurityGroups[] | select(.GroupName == "launch-wizard-1") .GroupId'`
    aws ec2 run-instances --image-id ami-fce3c696 --count 1 --instance-type t2.micro --key-name joegallo --security-group-ids $groupId --subnet-id subnet-65546d3c --block-device-mappings "[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":20,\"VolumeType\":\"gp2\",\"DeleteOnTermination\":true}}]"
    unset groupId

    ec2Id=`aws ec2 describe-instances | jq -r '.Reservations[] | select (.Instances[].State.Name == "running") .Instances[].PublicIpAddress'`
    echo "ubuntu@$ec2Id"
    unset ec2Id

    B)
    aws ec2 create-security-group --group-name launch-wizard-2 --description "test" --vpc-id vpc-175cfb73
    aws ec2 run-instances --image-id ami-d05e75b8 --count 1 --instance-type t2.micro --key-name joegallo --security-group-ids sg-ae10c4c8 --subnet-id subnet-65546d3c --block-device-mappings "[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":20,\"VolumeType\":\"gp2\",\"DeleteOnTermination\":true}}]"
    aws ec2 create-tags --resources i-c110e862 --tags Key=Name,Value=php-test

    // in the event you fuck up ssh access
    aws ec2 stop-instances --instance-ids i-9a31e5f8
    aws ec2 describe-instances --instance-ids i-9a31e5f8
    aws ec2 detach-volume --volume-id vol-91b3defc
    aws ec2 attach-volume --volume-id vol-91b3defc --instance-id i-3785de80 --device /dev/sdf
    ssh scratch
    sudo -i
    mount /dev/xvdf /mnt
    umount /mnt
    aws ec2 describe-instances --instance-ids i-3785de80
    aws ec2 detach-volume --volume-id vol-91b3defc
    aws ec2 attach-volume --volume-id vol-91b3defc --instance-id i-9a31e5f8 --device /dev/sda1
    aws ec2 start-instances --instance-ids i-9a31e5f8
  s3
    aws s3 ls s3://nooklyn-pro/locations/ --recursive --profile nooklyn | vim -
    aws --profile hbs-stage s3 rm s3://hbs-stage/uploads/background_image/image/2/background2.JPG
    aws s3 cp "7th Avenue Donuts and Diner" 's3://storage.tastesavant.com/restaurants/7th Avenue Donuts and Diner' --recursive

babel
  npm install -g babel-cli
  babel-node <script>

bc
  echo 'ibase=2;obase=A;10000001' | bc
  echo 'ibase=16;obase=A;FF' | bc

brew
  brew info elasticsearch
  brew switch elasticsearch 1.7.3

cordova
  cordova create hello com.example.hello "HelloWorld"
  cd hello
  cordova platform add ios
  cordova build
  cordova plugin add plugin.google.maps --variable API_KEY_FOR_IOS="AIzaSyCSi7Zh5unqv-Vt83BOgvOdfvPHEGANi_g"
  cordova emulate

curl
  cat urls.txt | parallel -j30 --eta curl -I
  curl --user name:password http://www.example.com
  curl --data "param1=value1&param2=value2" http://example.com/resource.cgi
  curl -X GET -H 'Authorization: Token token="427ecba7da11b68675405bd69d19b756"' http://0.0.0.0:3000/api/v1/help-now > blah.html && chrome blah.html

ffmpeg
  for x (*.flac); do ffmpeg -i $x -ab 196k -ac 2 -ar 48000 "${x:r}.mp3"; done

ghostscript
  gs \
 -sOutputFile=output.pdf \
 -sDEVICE=pdfwrite \
 -sColorConversionStrategy=Gray \
 -dProcessColorModel=/DeviceGray \
 -dCompatibilityLevel=1.4 \
 -dNOPAUSE \
 -dBATCH \
 records.pdf

pdf
  brew install poppler
  pdfunite in1.pdf in2.pdf out.pdf

git
  git grep 'addSection' $(git rev-list --all)
  git bisect start
  git bisect bad
  git bisect good <hash>
  git bisect reset
  git tag -f -a 1.0 -m '1.0 release'
  git push --follow-tags
  git push origin :refs/tags/v1.2 (for updating tag)
  git tag -f -a v1.2 -m '1.2 release'
  git push --follow-tags
  easier way of pulling down pull-requests from an upstream
    [remote "upstream"]
      url = https://github.com/mikedeboer/node-github.git
      fetch = +refs/heads/*:refs/remotes/upstream/*
      fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*   <--

github
  curl -u kaizensoze:e117f33cfccd8e127040d6e3675db3c64325233c https://api.github.com/rate_limit

heroku
  heroku pg:psql
  heroku pg:backups
  heroku pg:backups public-url a399
  heroku pg:backups capture

  heroku pg:info
  heroku pg:reset DATABASE_URL
  heroku pg:reset HEROKU_POSTGRESQL_PINK_URL --confirm hbs-stage && heroku run rake db:migrate db:seed

  heroku logs -t

  heroku run rake db:migrate
  heroku run rails console
  heroku run rails console -a hbs-stage

  heroku config

  heroku releases

  heroku run rake db:migrate -a nooklyn-dev-pr-1075
  git push heroku master && heroku run rake db:migrate && heroku restart

imagemagick
  identify -verbose [image]
  exiftool -all= [image]
  convert *.jpg deposit_and_receipt.pdf

jq
  jq -r '.SecurityGroups[] | select(.Description == "default group") | .GroupId

laravel
  php artisan init
  php artisan serve

  php artisan migrate:refresh && php artisan init
  php artisan serve

mail
  echo "This is a test." | mail -s Testing gallo.j@gmail.com

mongodb
  sudo service mongod start
  sudo service mongod status
  mongo karass
  show collections
  db.users.find({})
  db.users.find({}, {username: 1, _id: 0})
  db.users.remove({})

nginx
  sudo nginx -t
  sudo nginx -s reload

npm
  npm ls [--global] --depth=0

osx
  sudo dscacheutil -flushcache
  sysctl -a hw

php
  brew install homebrew/php/php70
  brew install homebrew/php/php70-pdo-pgsql
  add export PATH="$(brew --prefix homebrew/php/php70)/bin:$PATH" to ~/.zshrc

pip
  pip install --user (already as alias in zshrc)
  pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs pip install -U   (upgrades all installed)

postgres
  run/stop server
    pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
    pg_ctl -D /usr/local/var/postgres stop -s -m fast
  psql
    \connect nooklyn
    \l (list databases)
    \d (list tables)
    \d[+] [table] (describe table)
    \q (quit)
  create database
    create database nooklyn_test with template nooklyn owner joegallo;
  dump/restore (import)
    import dump into existing database
      pg_restore --verbose --clean --no-acl --no-owner -h localhost -U joegallo -d nooklyn ~/Downloads/latest.dump
    pg_dump -U joegallo nooklyn -f ~/Downloads/nooklyn.sql
    pg_restore -d newdb db.dump
    psql nooklyn < ~/Downloads/nooklyn.sql
  select table_name from information_schema.columns where column_name like 'mate_post_id';

pyenv
  pyenv install -l
  pyenv install <version>
  pyenv global <version> <version> ...

rails
  bundle install && rake db:migrate && PORT=3000 foreman start

  be rake db:migrate VERSION=0 && be rake db:migrate
  be rake db:drop db:create db:migrate db:seed

  puts BackgroundImage.all.select("sort_order").order("sort_order").map(&:sort_order).join("\n")
  Location.joins(:neighborhood).where(neighborhoods: { region_id: [value] })

  User.find(9999).destroy

  rake test [testpath]
  be rspec [testpath]

  y MatePost.find(2409)  (in rails console)

rsync
  rsync -avzhe ssh --progress ubuntu@54.175.82.101:~/son ~/Downloads/son

screen
  rename window:  C-a A
  reorder window: C-a :number n

siege
  siege -c200 -b -t3M -i -f urls.txt

smc
  ./smc -l | grep 'F0ID'

solr
  cd /usr/local/Cellar/solr/<version>/libexec/example/ && java -jar start.jar &

sort
  sort -u (unique)
  sort -f (ignore case)

sqlite
  .tables
  .schema <table>
  .quit
  PRAGMA table_info(table_name);

ssh
  ssh -fN -L 3307:127.0.0.1:3306 web@caribou.tastesavant.com

ssh-agent
  eval "$(ssh-agent -s)"
  ssh-add -l
  ssh-add -L
  ssh-add <private_key>

ssh-keygen
  ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

tcpdump
  sudo tcpdump -nS
  sudo tcpdump -nnvvS
  sudo tcpdump -nnvvXS
  sudo tcpdump -nnvvXSs 0
  sudo tcpdump -nn -tttt -XX -s 0 -l -i any | tee output.txt
  sudo tcpdump -nn -tttt -XX -s 0 -l -i any src 192.168.0.100 | tee output.txt

transmission
  sudo apt-get update && sudo apt-get install -y transmission-cli && transmission-cli <url>

tshark
  sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
  tshark -I -i en0 -Y http -T fields -e http.host -e ip.src
  tshark -I -i en0 -Y 'http and not udp'
  tshark -I -i en0 -Y http.request -T fields -e http.host

tugboat
  tugboat authorize
  tugboat keys
  vim ~/.tugboat
  tugboat droplets
  tugboat create
  tugboat info <droplet>
  tugboat ssh <droplet>
  tugboat restart <droplet>
  tugboat destroy <droplet>

vim
  :%s/\r/\r/g

virtualenv
  mkvirtualenv blah
  workon blah
  rmvirtualenv blah

wireshark
  DON'T FORGET: https://ask.wireshark.org/questions/42897/how-do-i-turn-on-monitor-mode-in-mac-os-x-with-wireshark-v199
  http
  ip.src == 192.168.1.109 || ip.dst == 192.168.1.109

xcode
  po thing.recursiveDescription

zsh
  print -l ${(ok)functions}  # list functions

xxd
  echo '3be0' | xxd -r -p | xxd -b   # hex to binary
