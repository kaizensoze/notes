create most basic digitalocean
  $10/mo
  ubuntu 14.04 x64
  no extra settings checked

basic setup
  sudo adduser duckspeaker
  sudo usermod -a -G sudo duckspeaker
  su - duckspeaker

  mkdir ~/.ssh && echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmBTzBf3R+SYbfdoU9LATLQ/pSM2VEKgOXrPcm88R6HrftyviCEz5ilJzm4Ozhh7pSiIYPh5VSAVlS/5pJxsCmokHQpnZYZrP1U47d7fqn9kU1R/aJZS8jxwz4ZPk22TH4kvYwTBtnB5rMIZYhb3PUIhHnwfknQc0mVFTNOz66y2Y9+SjixrdDcwprtTr76SnFAPqRFhxpoH50VAU5zuiP/MNAK932hSYzh65Q2lzZG32fZ8CaHILKf0uG5CLWGk3zxA0Yz+eBy7rbkCXkIsceUekvvVmmx8dc14y9hWTkp7FOTQ/xtxx6UTHaPUk7/tzEXhN5rjYgt8UYAnPdFStH' > ~/.ssh/authorized_keys

  sudo vim /etc/iptables.firewall.rules
    *filter

    #  Allow all loopback (lo0) traffic and drop all traffic to 127/8 that doesn't use lo0
    -A INPUT -i lo -j ACCEPT
    -A INPUT -d 127.0.0.0/8 -j REJECT

    #  Accept all established inbound connections
    -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

    #  Allow all outbound traffic - you can modify this to only allow certain traffic
    -A OUTPUT -j ACCEPT

    #  Allow HTTP and HTTPS connections from anywhere (the normal ports for websites and SSL).
    -A INPUT -p tcp --dport 80 -j ACCEPT
    -A INPUT -p tcp --dport 443 -j ACCEPT
    -A INPUT -p tcp --dport 3000 -j ACCEPT

    #  Allow SSH connections
    #
    #  The -dport number should be the same port number you set in sshd_config
    #
    -A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT

    #  Allow ping
    -A INPUT -p icmp -j ACCEPT

    #  Log iptables denied calls
    -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

    #  Drop all other inbound - default deny unless explicitly allowed policy
    -A INPUT -j DROP
    -A FORWARD -j DROP

    COMMIT
  sudo iptables-restore < /etc/iptables.firewall.rules

  sudo vim /etc/network/if-pre-up.d/firewall
    #!/bin/sh
    /sbin/iptables-restore < /etc/iptables.firewall.rules
  sudo chmod +x /etc/network/if-pre-up.d/firewall

  sudo apt-get update
  sudo apt-get upgrade -y
  sudo apt-get install -y fail2ban siege
  echo -e "logging = true\nlogfile = $HOME/siege.log" >> ~/.siegerc
  sudo reboot

express
  sudo apt-get install -y curl git
  curl -sL https://deb.nodesource.com/setup_4.x | sudo bash -
  sudo apt-get install -y nodejs
  mkdir node-app && cd node-app
  sudo npm install -g pm2
  npm init
  npm install --save express
  vim app.js
    var express = require('express');
    var app = express();

    app.get('/', function (req, res) {
      res.json({
        "text": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nam nibh. Nunc varius facilisis eros. Sed erat. In in velit quis arcu ornare laoreet. Curabitur adipiscing luctus massa. Integer ut purus ac augue commodo commodo. Nunc nec mi eu justo tempor consectetuer. Etiam vitae nisl. In dignissim lacus ut ante. Cras elit lectus, bibendum a, adipiscing vitae, commodo et, dui. Ut tincidunt tortor. Donec nonummy, enim in lacinia pulvinar, velit tellus scelerisque augue, ac posuere libero urna eget neque. Cras ipsum. Vestibulum pretium, lectus nec venenatis volutpat, purus lectus ultrices risus, a condimentum risus mi et quam. Pellentesque auctor fringilla neque. Duis eu massa ut lorem iaculis vestibulum. Maecenas facilisis elit sed justo. Quisque volutpat malesuada velit.\n\nNunc at velit quis lectus nonummy eleifend. Curabitur eros. Aenean ligula dolor, gravida auctor, auctor et, suscipit in, erat. Sed malesuada, enim ut congue pharetra, massa elit convallis pede, ornare scelerisque libero neque ut neque. In at libero. Curabitur molestie. Sed vel neque. Proin et dolor ac ipsum elementum malesuada. Praesent id orci. Donec hendrerit. In hac habitasse platea dictumst. Aenean sit amet arcu a turpis posuere pretium.",
        "imageURL": "http://i.imgur.com/RbQUkoe.jpg"
      });
    });

    var server = app.listen(3000, function () {
      var host = server.address().address;
      var port = server.address().port;
    });
  pm2 start ~/node-app/app.js
  siege -c500 -t1M "http://localhost:3000"

flask
  mkdir flask-app && cd flask-app
  sudo apt-get install -y python python-pip gunicorn
  sudo pip install Flask==0.10.1
  sudo vim app.py
    from flask import Flask, jsonify

    app = Flask(__name__)

    @app.route('/')
    def index():
        return jsonify({
            "text": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nam nibh. Nunc varius facilisis eros. Sed erat. In in velit quis arcu ornare laoreet. Curabitur adipiscing luctus massa. Integer ut purus ac augue commodo commodo. Nunc nec mi eu justo tempor consectetuer. Etiam vitae nisl. In dignissim lacus ut ante. Cras elit lectus, bibendum a, adipiscing vitae, commodo et, dui. Ut tincidunt tortor. Donec nonummy, enim in lacinia pulvinar, velit tellus scelerisque augue, ac posuere libero urna eget neque. Cras ipsum. Vestibulum pretium, lectus nec venenatis volutpat, purus lectus ultrices risus, a condimentum risus mi et quam. Pellentesque auctor fringilla neque. Duis eu massa ut lorem iaculis vestibulum. Maecenas facilisis elit sed justo. Quisque volutpat malesuada velit.\n\nNunc at velit quis lectus nonummy eleifend. Curabitur eros. Aenean ligula dolor, gravida auctor, auctor et, suscipit in, erat. Sed malesuada, enim ut congue pharetra, massa elit convallis pede, ornare scelerisque libero neque ut neque. In at libero. Curabitur molestie. Sed vel neque. Proin et dolor ac ipsum elementum malesuada. Praesent id orci. Donec hendrerit. In hac habitasse platea dictumst. Aenean sit amet arcu a turpis posuere pretium.",
            "imageURL": "http://i.imgur.com/RbQUkoe.jpg"
        })

    if __name__ == '__main__':
        app.run()
  gunicorn app:app -b localhost:8000
  siege -c500 -t1M "http://localhost:8000"

golang
  sudo apt-get install -y git build-essential bison
  bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
  source /home/duckspeaker/.gvm/scripts/gvm
  gvm listall
  gvm install go1.4
  gvm use go1.4 --default
  mkdir go-app && cd go-app
  vim main.go
    package main

    import (
      "net/http"
    )

    func main() {
      http.HandleFunc("/", foo)
      http.ListenAndServe(":3000", nil)
    }

    func foo(w http.ResponseWriter, r *http.Request) {
      json := []byte(`{"text":"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nam nibh. Nunc varius facilisis eros. Sed erat. In in velit quis arcu ornare laoreet. Curabitur adipiscing luctus massa. Integer ut purus ac augue commodo commodo. Nunc nec mi eu justo tempor consectetuer. Etiam vitae nisl. In dignissim lacus ut ante. Cras elit lectus, bibendum a, adipiscing vitae, commodo et, dui. Ut tincidunt tortor. Donec nonummy, enim in lacinia pulvinar, velit tellus scelerisque augue, ac posuere libero urna eget neque. Cras ipsum. Vestibulum pretium, lectus nec venenatis volutpat, purus lectus ultrices risus, a condimentum risus mi et quam. Pellentesque auctor fringilla neque. Duis eu massa ut lorem iaculis vestibulum. Maecenas facilisis elit sed justo. Quisque volutpat malesuada velit.\n\nNunc at velit quis lectus nonummy eleifend. Curabitur eros. Aenean ligula dolor, gravida auctor, auctor et, suscipit in, erat. Sed malesuada, enim ut congue pharetra, massa elit convallis pede, ornare scelerisque libero neque ut neque. In at libero. Curabitur molestie. Sed vel neque. Proin et dolor ac ipsum elementum malesuada. Praesent id orci. Donec hendrerit. In hac habitasse platea dictumst. Aenean sit amet arcu a turpis posuere pretium.", "imageURL":"http://i.imgur.com/RbQUkoe.jpg"}`)
      w.Header().Set("Content-Type", "application/json")
      w.Write(json)
    }
  siege -c500 -t1M "http://localhost:3000"

scala (play, scalatra)
  sudo apt-get install -y unzip

  sudo add-apt-repository ppa:webupd8team/java
  sudo apt-get update
  java -version
  sudo apt-get install oracle-java8-set-default

  wget http://www.scala-lang.org/files/archive/scala-2.11.7.deb
  sudo dpkg -i scala-2.11.7.deb

  echo "deb http://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
  sudo apt-get update
  sudo apt-get install sbt

  wget https://downloads.typesafe.com/typesafe-activator/1.3.6/typesafe-activator-1.3.6.zip
  unzip typesafe-activator-1.3.6.zip
  cd activator*
  export PATH=/home/duckspeaker/activator-dist-1.3.6:$PATH
  ....
  # There is insufficient memory for the Java Runtime Environment to continue.

  // switching from play to scalatra

  ...
  # There is insufficient memory for the Java Runtime Environment to continue.
  // the hell with java...

php (phalcon, laravel)
  sudo apt-add-repository ppa:phalcon/stable
  sudo apt-get update
  sudo apt-get install -y php5-phalcon
  // yeah nevermind

cpus
  digitalocean: Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHz
  linode (kvm): Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz
  aws (t2.micro): Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz

results (node-test)
  node-test
    digitalocean
            Date & Time,  Trans,  Elap Time,  Data Trans,  Resp Time,  Trans Rate,  Throughput,  Concurrent,    OKAY,   Failed
      2015-10-14 03:11:16, 105042,      59.13,         128,       0.27,     1776.46,        2.16,      487.34,  105042,       0
      2015-10-14 03:14:25, 110658,      59.52,         135,       0.26,     1859.17,        2.27,      488.94,  110658,       0
      2015-10-14 03:17:18, 108659,      60.07,         132,       0.27,     1808.87,        2.20,      489.28,  108659,       0
    linode (xen)
            Date & Time,  Trans,  Elap Time,  Data Trans,  Resp Time,  Trans Rate,  Throughput,  Concurrent,    OKAY,   Failed
      2015-10-14 07:11:06,  92523,      59.14,         112,       0.31,     1564.47,        1.89,      489.70,   92523,       0
      2015-10-14 07:14:28,  96393,      60.05,         117,       0.31,     1605.21,        1.95,      490.19,   96393,       0
      2015-10-14 07:17:23,  95718,      59.96,         116,       0.31,     1596.36,        1.93,      492.30,   95718,       0
    linode (kvm)
            Date & Time,  Trans,  Elap Time,  Data Trans,  Resp Time,  Trans Rate,  Throughput,  Concurrent,    OKAY,   Failed
      2015-10-14 07:41:00, 126421,      59.05,         154,       0.23,     2140.91,        2.61,      488.69,  126421,       0
      2015-10-14 07:43:29, 126616,      59.41,         154,       0.23,     2131.22,        2.59,      492.40,  126616,       0
      2015-10-14 07:51:37, 123518,      59.45,         150,       0.24,     2077.68,        2.52,      493.84,  123518,       0
    aws (t2.micro)
            Date & Time,  Trans,  Elap Time,  Data Trans,  Resp Time,  Trans Rate,  Throughput,  Concurrent,    OKAY,   Failed
      2015-10-14 07:06:04, 128968,      59.70,         157,       0.23,     2160.27,        2.63,      492.68,  128968,       0
      2015-10-14 07:14:32, 127580,      59.47,         155,       0.23,     2145.28,        2.61,      492.10,  127580,       0
      2015-10-14 07:17:26, 130899,      60.04,         159,       0.23,     2180.20,        2.65,      493.55,  130899,       0
  go-test
    aws (t2.micro)
            Date & Time,  Trans,  Elap Time,  Data Trans,  Resp Time,  Trans Rate,  Throughput,  Concurrent,    OKAY,   Failed
      2015-10-15 06:39:44, 286872,      59.23,         350,       0.10,     4843.36,        5.91,      493.39,  286872,       0
      2015-10-15 06:41:33, 292825,      59.13,         357,       0.10,     4952.22,        6.04,      493.97,  292825,       0
      2015-10-15 06:43:31, 296075,      59.79,         361,       0.10,     4951.92,        6.04,      493.45,  296075,       0
